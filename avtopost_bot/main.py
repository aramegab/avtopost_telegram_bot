import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import Throttled, BotBlocked
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, 
    KeyboardButton, ReplyKeyboardMarkup, CallbackQuery,
    ChatType, InputFile, ReplyKeyboardRemove
)
from dotenv import load_dotenv
from db import *
import kb
from states import *
from datetime import datetime

messages_to_delete = {}

load_dotenv()

API_BOT_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_ID = os.getenv("CHANNEL_ID")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

usersdb = UsersDB()
addb = AdDB()

class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=0.5, key_prefix="antiflood_"):
        self.rate_limit = limit
        self.prefix = key_prefix
        super(ThrottlingMiddleware, self).__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        if handler:
            limit = getattr(handler, "throttling_rate_limit", self.rate_limit)
            key = getattr(handler, "throttling_key", f"{self.prefix}_{handler.__name__}")
        else:
            limit = self.rate_limit
            key = f"{self.prefix}_message"
        try:
            await dispatcher.throttle(key, rate=limit)
        except Throttled as t:
            await self.message_throttled(message, t)
            raise CancelHandler()

    async def message_throttled(self, message: types.Message, throttled: Throttled):
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        if handler:
            key = getattr(handler, "throttling_key", f"{self.prefix}_{handler.__name__}")
        else:
            key = f"{self.prefix}_message"
        delta = throttled.rate - throttled.delta
        if throttled.exceeded_count <= 2:
            await message.reply("<b>‚ùó –ù–µ —Å–ø–∞–º—å</b>")
        await asyncio.sleep(delta)
        thr = await dispatcher.check_key(key)

def rate_limit(limit: int, key=None):
    def decorator(func):
        setattr(func, "throttling_rate_limit", limit)
        if key:
            setattr(func, "throttling_key", key)
        return func
    return decorator

@dp.message_handler(commands="start", state="*")
@rate_limit(2, 'start')
async def start(message: types.Message):
    check_user = usersdb.check_client_in_db(message.from_user.id)
    if check_user:
        get_user = usersdb.get_user(message.from_user.id)
        user_id = message.from_user.id
        user_photos = await bot.get_user_profile_photos(user_id)

        get_user = usersdb.get_user(user_id)
        msg = f'''‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë§ –õ–æ–≥–∏–Ω: @{message.from_user.username}
üïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {get_user[4]}
üîë ID: <code>{message.from_user.id}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì® –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {usersdb.get_all_ads(message.from_user.id)}
üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {usersdb.get_ads_pending(message.from_user.id)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'''

        if user_photos.total_count > 0:
            photo = user_photos.photos[0][-1]
            await message.answer_photo(photo=photo.file_id, caption=msg, reply_markup=kb.menu(message.from_user.id))
        else:
            await message.reply(msg, reply_markup=kb.menu(message.from_user.id))
    else:
        user_photos = await bot.get_user_profile_photos(message.from_user.id)
        if user_photos.total_count > 0:
            photo = user_photos.photos[0][-1]
            file_info = await bot.get_file(photo.file_id)
            file_path = file_info.file_path
            photo_file = await bot.download_file(file_path)
            save_path = os.path.join("avatars", f"{message.from_user.id}.jpg")
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            with open(save_path, 'wb') as f:
                f.write(photo_file.getvalue())
            now = datetime.now()
            timestamp = now.strftime("%Y-%m-%d")
            usersdb.add_user(
                telegram_id=message.from_user.id,
                username='@'+message.from_user.username,
                avatar=f'avatars/{message.from_user.id}.jpg',
                resgistration_time=timestamp
            )
            get_user = usersdb.get_user(message.from_user.id)
            msg = f'''‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë§ –õ–æ–≥–∏–Ω: @{message.from_user.username}
üïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {get_user[4]}
üîë ID: <code>{message.from_user.id}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì® –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {usersdb.get_all_ads(message.from_user.id)}
üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {usersdb.get_ads_pending(message.from_user.id)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'''
            await message.answer_photo(photo=photo.file_id, caption=msg, reply_markup=kb.menu(message.from_user.id),parse_mode='html')
        else:
            now = datetime.now()
            timestamp = now.strftime("%Y-%m-%d")
            usersdb.add_user(
                telegram_id=message.from_user.id,
                username='@'+message.from_user.username,
                avatar=f'No photo',
                resgistration_time=timestamp
            )
            get_user = usersdb.get_user(message.from_user.id)
            msg = f'''‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë§ –õ–æ–≥–∏–Ω: @{message.from_user.username}
üïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {get_user[4]}
üîë ID: <code>{message.from_user.id}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì® –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {usersdb.get_all_ads(message.from_user.id)}
üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {usersdb.get_ads_pending(message.from_user.id)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'''
            await message.reply(text=msg, reply_markup=kb.menu(message.from_user.id))

@dp.message_handler(content_types=['text'], text=['üíª–ü—Ä–æ—Ñ–∏–ª—å'])
async def send_profile(message: types.Message):
    user_id = message.from_user.id
    user_photos = await bot.get_user_profile_photos(user_id)

    get_user = usersdb.get_user(user_id)
    msg = f'''‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë§ –õ–æ–≥–∏–Ω: @{message.from_user.username}
üïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {get_user[4]}
üîë ID: <code>{message.from_user.id}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì® –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {usersdb.get_all_ads(message.from_user.id)}
üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {usersdb.get_ads_pending(message.from_user.id)}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'''

    if user_photos.total_count > 0:
        photo = user_photos.photos[0][-1]
        await message.answer_photo(photo=photo.file_id, caption=msg, reply_markup=kb.menu(message.from_user.id))
    else:
        await message.reply(msg, reply_markup=kb.menu(message.from_user.id))

@dp.message_handler(content_types=['text'], text=['‚ùìFAQ'])
async def faq(message: types.Message):
    msg = '''–ó–∞–ø—Ä–µ—â–µ–Ω–æ: 
...'''
    await message.answer_document(InputFile('docs/–ü—Ä–∞–≤–∏–ª–∞.pdf'),caption=msg)

@dp.message_handler(content_types=['text'], text=['‚ô®Ô∏è–ü–æ–º–æ—â—å'])
async def help(message: types.Message):
    await message.answer('üì≤–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π: ')

@dp.message_handler(content_types=['text'], text=['üì®–û–±—ä—è–≤–ª–µ–Ω–∏—è'])
async def send_profile(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–∏–≤–µ:",reply_markup=kb.ad_keyboard())

@dp.message_handler(content_types=['text'], text=['üéõ–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—åüéõ'])
async def help(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer('üéõ–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:',reply_markup=kb.adminmenu(message.from_user.id))
    else:
        pass

@dp.callback_query_handler(text_startswith=('cancel_func'), state='*')
async def cancel(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞')

@dp.message_handler(content_types=['text'], text=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤'])
async def help(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        count = usersdb.get_all_users_count()
        await message.answer(f'üöÄ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ: {count}')
    else:
        pass

@dp.message_handler(content_types=['text'], text=['–†–∞—Å—Å—ã–ª–∫–∞'])
async def help(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer('üí¨–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',reply_markup=kb.cancel())
        await Rassilka.text.set()
    else:
        pass

@dp.message_handler(content_types=['text'], text=['–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞'])
async def help(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer('üí¨–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ',reply_markup=kb.cancel())
        await Addmoder.idmoder.set()
    else:
        pass

@dp.message_handler(state=Addmoder.idmoder)
async def cancel_publication(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.finish()
    user = usersdb.add_moder(message.text)
    try:
        usersdb.add_moder(message.text)
        await bot.send_message(chat_id=message.text,text='‚ú® –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!')
        await message.answer('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

@dp.message_handler(content_types=['text'], text=['–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞'])
async def help(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer('üí¨–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º –∞–π–¥–∏ –º–æ–¥–µ—Ä–∞: ',reply_markup=kb.cancel())
        await Delmoder.idmoder.set()
    else:
        pass

@dp.message_handler(state=Delmoder.idmoder)
async def cancel_publication(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.finish()
    try:
        user = usersdb.delete_moder(message.text)
        await bot.send_message(chat_id=message.text,text='‚ùå –í–∞—Å —Å–Ω—è–ª–∏ —Å –ø–æ—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!')
        await message.answer('‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–Ω—è—Ç')
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')

@dp.message_handler(content_types=['text'], text=['–í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏'])
async def help(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=kb.menu(message.from_user.id))
    else:
        pass

@dp.message_handler(state=Rassilka.text)
async def cancel_publication(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.finish()
    users = usersdb.get_all_users()
    for user in users:
        try:
            await bot.send_message(user[0],message.text)
        except:
            await asyncio.sleep(1)
    await message.answer('‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


@dp.message_handler(content_types=['text'], text=['–ù–∞–∑–∞–¥'])
async def send_profile(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb.menu(message.from_user.id))

@dp.message_handler(text='–û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', state=[CreateAd.waiting_for_text, CreateAd.waiting_for_confirmation, CreateAd.waiting_for_photo, CreateAd.waiting_for_publish])
async def cancel_publication(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.ad_keyboard())

@dp.message_handler(text='‚úÖ–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def start_ad_creation(message: types.Message):
    await message.answer("‚úâÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n",
                         reply_markup=ReplyKeyboardRemove())
    await CreateAd.waiting_for_text.set()

@dp.message_handler(state=CreateAd.waiting_for_text, content_types=types.ContentTypes.TEXT)
async def ad_text_received(message: types.Message, state: FSMContext):
    await state.update_data(ad_text=message.text)
    await message.answer(f"üí¨–í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{message.text}\n\n‚ùóÔ∏è–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –Ω–∞–∂–º–∏—Ç–µ - –î–∞",
                         reply_markup=kb.confirmation_keyboard())
    await CreateAd.waiting_for_confirmation.set()

@dp.message_handler(text='–î–∞', state=CreateAd.waiting_for_confirmation)
async def confirm_ad_text(message: types.Message, state: FSMContext):
    await message.answer("üñºÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –û–î–ù–£ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",reply_markup=kb.no_photo())
    await CreateAd.waiting_for_photo.set()

@dp.message_handler(content_types=['photo','text'],text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', state=CreateAd.waiting_for_photo)
async def photo_received(message: types.Message, state: FSMContext):
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏':
        photo_id = 'None'
        data = await state.get_data()
        ad_text = data['ad_text']
        await message.answer(ad_text)
        await message.answer("üõë–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                         reply_markup=kb.publish_keyboard())
        await state.update_data(photo_id=photo_id)
        await CreateAd.waiting_for_publish.set()
    else:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        ad_text = data['ad_text']

        await message.answer_photo(photo=photo_id, caption=ad_text)
        await message.answer("üõë–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                            reply_markup=kb.publish_keyboard())
        await state.update_data(photo_id=photo_id)
        await CreateAd.waiting_for_publish.set()

@dp.message_handler(text='–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å', state=CreateAd.waiting_for_publish)
async def send_for_moderation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ad_text = data['ad_text']
    photo_id = data['photo_id']
    user_id = message.from_user.id

    if photo_id == 'None':
        addb.add_ad(user_id, ad_text, photo_id, '–û–∂–∏–¥–∞–Ω–∏–µ')
        ad_id = addb.get_ad_by_tg_id(user_id)[0]
        await message.answer("‚ùÑÔ∏è–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏", reply_markup=kb.menu(message.from_user.id))
        moderators = usersdb.get_moderators()
        for moderator in moderators:
            await bot.send_message(moderator[1], text=ad_text, reply_markup=kb.moderation_keyboard(ad_id))
        await bot.send_message(ADMIN_ID, text=ad_text, reply_markup=kb.moderation_keyboard(ad_id))

        await state.finish()
    
    else:
        addb.add_ad(user_id, ad_text, photo_id, '–û–∂–∏–¥–∞–Ω–∏–µ')
        ad_id = addb.get_ad_by_photo_id(photo_id)[0]
        await message.answer("‚ùÑÔ∏è–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏", reply_markup=kb.menu(message.from_user.id))
        moderators = usersdb.get_moderators()
        for moderator in moderators:
            await bot.send_photo(moderator[1], photo=photo_id, caption=ad_text, reply_markup=kb.moderation_keyboard(ad_id))
        await bot.send_photo(ADMIN_ID, photo=photo_id, caption=ad_text, reply_markup=kb.moderation_keyboard(ad_id))
        await state.finish()

@dp.callback_query_handler(text_startswith="approve_", state="*")
async def approve_ad(callback_query: types.CallbackQuery):
    ad_id = int(callback_query.data.split('_')[1])
    ad = addb.get_ad(ad_id)
    if ad[3] == 'None':
        if ad[4] == '–û–∂–∏–¥–∞–Ω–∏–µ':
            ad_id = int(callback_query.data.split('_')[1])
            addb.update_ad_status(ad_id, '–û–¥–æ–±—Ä–µ–Ω')
            await callback_query.message.delete()
            await callback_query.answer('‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')


            ad = addb.get_ad(ad_id)
            user_id = ad[1]
            await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
            await bot.send_message(CHANNEL_ID, text=ad[2])
        else:
            await callback_query.message.delete()
            await callback_query.message.answer('–û—à–∏–±–∫–∞:\n\n–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
    else:
        if ad[4] == '–û–∂–∏–¥–∞–Ω–∏–µ':
            ad_id = int(callback_query.data.split('_')[1])
            addb.update_ad_status(ad_id, '–û–¥–æ–±—Ä–µ–Ω')
            await callback_query.message.delete()
            await callback_query.answer('‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')


            ad = addb.get_ad(ad_id)
            user_id = ad[1]
            await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
            

            await bot.send_photo(CHANNEL_ID, photo=ad[3], caption=ad[2])
        else:
            await callback_query.message.delete()
            await callback_query.message.answer('–û—à–∏–±–∫–∞:\n\n–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')

@dp.callback_query_handler(text_startswith="reject_", state="*")
async def reject_ad(callback_query: types.CallbackQuery):
    ad_id = int(callback_query.data.split('_')[1])
    ad = addb.get_ad(ad_id)
    if ad[4] == '–û–∂–∏–¥–∞–Ω–∏–µ':
        addb.update_ad_status(ad_id, '–û—Ç–∫–ª–æ–Ω–µ–Ω')

        await callback_query.message.delete()
        ad = addb.get_ad(ad_id)
        user_id = ad[1]
        await bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        
        await callback_query.answer('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
    else:
        await callback_query.message.delete()
        await callback_query.message.answer('–û—à–∏–±–∫–∞\n\n–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')

if __name__ == '__main__':
    if not os.path.exists('avatars'):
        os.makedirs('avatars')
    if not os.path.exists('database'):
        os.makedirs('database')
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
